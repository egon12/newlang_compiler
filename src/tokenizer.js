const number = 'number';
const keyword = 'keyword';
const indentifier = 'identifier';
const operator = 'operator';
const string = 'string';

class Token {
	constructor() {
		this._token = '';
	}

	set token(token) {
		this._token = token;
	}

	get token() {
		return this._token;
	}
}



class Tokenizer {

	parse(input) {
		const tokenList = [];
		const inputArray = input.split(' ');
		for (let i = 0; i < inputArray.length; i++) {
			const token = new Token();
			token.type = this.getTokenType(inputArray[i]);
			tokenList.push(token);
		}
		return tokenList;
	}

	getTokenType(input) {
		if (this.isNumber(input)) {
			return number;
		} else if (this.isKeyword(input)) {
			return keyword;
		} else if (this.isIdentifier(input)) {
			return indentifier;
		} else if (this.isOperator(input)) {
			return operator;
		} else if (this.isString(input)) {
			return string;
		}
	}

	isNumber(input) {
		return !isNaN(input);
	}

	isKeyword(input) {
		return input === 'var';
	}

	isIdentifier(input) {
		return input.length > 1;
	}

	isOperator(input) {
		return isOperator(input);
	}

	isString(input) {
		return input.startsWith('"') && input.endsWith('"');
	}
}

/**
 * Below is the code generated by Github copilot
 */

/**
 * @param {string} input
 * @return {string}
 * @example
 * // returns 'hello'
 * unescapeString('"hello"');
 * @example
 * // returns 'hello'
 * unescapeString('"hello"');
 */

function isNumber(char) {
	return char >= '0' && char <= '9';
}

function isLetter(char) {
	return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z';
}

function isOperator(char) {
	return char === '+' || char === '-' || char === '*' || char === '/';
}

function isKeyword(char) {
	return char === 'var';
}

function isString(char) {
	return char === '"';
}

function isSpace(char) {
	return char === ' ';
}

function isEnd(char) {
	return char === ';';
}

function isIdentifier(char) {
	return isLetter(char) || isNumber(char);
}

function isToken(char) {
	return isNumber(char) || isLetter(char) || isOperator(char) || isKeyword(char) || isString(char) || isSpace(char) || isEnd(char);
}

function isWhiteSpace(char) {
	return char === ' ' || char === '\n' || char === '\t';
}

function isQuote(char) {
	return char === '"';
}

function isEscape(char) {
	return char === '\\';
}

function isSlash(char) {
	return char === '/';
}

function isStar(char) {
	return char === '*';
}

function isLineTerminator(char) {
	return char === '\n';
}

module.exports = Tokenizer;

